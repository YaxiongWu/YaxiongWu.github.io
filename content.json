{"meta":{"title":"吴亚雄的博客","subtitle":"吴亚雄的博客","description":null,"author":"wuyaxiong","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"树莓派P3设置静态IP","slug":"树莓派P3设置静态IP","date":"2017-06-21T11:26:44.000Z","updated":"2017-06-21T11:26:44.296Z","comments":true,"path":"2017/06/21/树莓派P3设置静态IP/","link":"","permalink":"http://yoursite.com/2017/06/21/树莓派P3设置静态IP/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"STM32L052的CRC8硬件实现","slug":"STM32L052的CRC8硬件实现","date":"2017-06-21T11:26:10.000Z","updated":"2017-06-21T11:26:10.709Z","comments":true,"path":"2017/06/21/STM32L052的CRC8硬件实现/","link":"","permalink":"http://yoursite.com/2017/06/21/STM32L052的CRC8硬件实现/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"STM32的ADC测量电压","slug":"STM32的ADC测量电压","date":"2017-06-21T11:25:45.000Z","updated":"2017-06-21T11:25:45.341Z","comments":true,"path":"2017/06/21/STM32的ADC测量电压/","link":"","permalink":"http://yoursite.com/2017/06/21/STM32的ADC测量电压/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"STM32 Spi DMA","slug":"STM32-Spi-DMA","date":"2017-06-21T11:25:11.000Z","updated":"2017-06-21T11:25:11.617Z","comments":true,"path":"2017/06/21/STM32-Spi-DMA/","link":"","permalink":"http://yoursite.com/2017/06/21/STM32-Spi-DMA/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"STM32f103 uart dma printf串口终极方案","slug":"STM32f103-uart-dma-printf串口终极方案","date":"2017-06-21T11:24:54.000Z","updated":"2017-06-21T11:24:54.797Z","comments":true,"path":"2017/06/21/STM32f103-uart-dma-printf串口终极方案/","link":"","permalink":"http://yoursite.com/2017/06/21/STM32f103-uart-dma-printf串口终极方案/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"STM32L0 Lorawan调试问题","slug":"STM32L0-Lorawan调试问题","date":"2017-06-21T11:24:04.000Z","updated":"2017-06-21T11:24:04.486Z","comments":true,"path":"2017/06/21/STM32L0-Lorawan调试问题/","link":"","permalink":"http://yoursite.com/2017/06/21/STM32L0-Lorawan调试问题/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"STM32L0不能连接的问题","slug":"STM32L0不能连接的问题","date":"2017-06-21T11:23:44.000Z","updated":"2017-06-22T00:17:02.022Z","comments":true,"path":"2017/06/21/STM32L0不能连接的问题/","link":"","permalink":"http://yoursite.com/2017/06/21/STM32L0不能连接的问题/","excerpt":"1. 问题 前期使用STM32L052+SX1276模块时，遇到了几个问题： 使用买来的，已经写好代码的MODEM，直接就不认，一直纠结于硬件问题，或是启动设置的问题，其实是写好的代码中，将SW调试端口用作了IO口，只要正常运行后，就无法正常的用作SW，所以一直连不上，ST-LINK软件的提示是有意义的，它提示使用硬件RESET，这个在”STM32 ST-LINK Utility”和keil中都有地方设置，原理就是SW的IO口做别的用了，就通过RESET来复位到SW，一般是点击连接，或下载，或调试时，立即按下RESET，很快松开，可正常使用","text":"1. 问题 前期使用STM32L052+SX1276模块时，遇到了几个问题： 使用买来的，已经写好代码的MODEM，直接就不认，一直纠结于硬件问题，或是启动设置的问题，其实是写好的代码中，将SW调试端口用作了IO口，只要正常运行后，就无法正常的用作SW，所以一直连不上，ST-LINK软件的提示是有意义的，它提示使用硬件RESET，这个在”STM32 ST-LINK Utility”和keil中都有地方设置，原理就是SW的IO口做别的用了，就通过RESET来复位到SW，一般是点击连接，或下载，或调试时，立即按下RESET，很快松开，可正常使用 FLASH的读保护问题 在连接FLASH后，提示读保护，网上大部分是让从RAM运行一段FLASH解锁的代码，有些复杂，没有成功。 解决办法： 连接板子与PC，进入Dos命令行，进入C:\\Program Files \\STMicroelectronics\\STM32 ST-LINK Utility\\ST-LINK Utility目录下，执行ST-Link_CLI.exe -c SWD UR -OB RDP=0 这样就可以把读保护去掉了。 2. 网上有价值的信息 很多人都碰到过调试器不能连接到STM32的问题，不管是IAR的J-Link还是Keil的ULink，或者是ST的ST-Link。出现这个问题时，调试软件会提示不能建立与Cortex-M3的连接，或提示不能下载程序，或提示找不到要调试的设备等。这样的问题都是发生在调试那些可以在CPU不干预的时候自动运行的模块、或在调试低功耗模式的程序的时候。所谓“可以在CPU不干预的时候自动运行的模块”包括：DMA、定时器、连续转换模式下的ADC、看门狗等模块。 这个问题的根源是： 调试器需要在RAM内执行一段程序，对Flash进行擦写操作，如果不停止这些自动运行的模块，它们会干扰程序在RAM中的执行，致使下载失败。比如DMA模块被配置为不停地拷贝一段数据区，而调试器刚好需要使用DMA数据传输的目标区域，这时DMA的操作将会与调试器的操作发生冲突。再比如，如果启动了看门狗而没有执行硬件复位，则在下次调试器需要下载程序时，看门狗超时将触发芯片复位，导致下载操作失败。 低功耗是通过停止CPU的时钟而实现，JTAG调试是通过与CPU的通信实现，停止了CPU的时钟致使调试器会失去与CPU的通信。 有人说“我停止调试的时候，这些模块已经停止了运行，应该不会干扰到后续的调试”，这个问题要从几方面看： 调试器是通过停止CPU核心的时钟来停止被调试程序的运行，实际上被调试芯片的硬件模块并没有被复位，它们还处于使能状态，那些能够自动运行的模块只是处于暂停状态，一旦恢复了时钟之后，它们仍会继续运行。 目前常用的调试软件，不管是IAR EWARM还是Keil MDK，调试软件界面上的”复位”按钮都不能对芯片执行硬件的复位，这个”复位”按钮只能对芯片内的程序执行软件复位，即把运行指针重新指向复位地址。 使用板上的复位按钮可以手动地进行硬件复位，使所有模块(包括那些能够自动运行的模块)停止工作并恢复到复位状态。但是当调试器需要控制CPU之前，它需要先为CPU核心提供时钟，然后需要较长的一段时间做一些初始化的动作，然后才能接管CPU核心的控制权。在调试器为CPU核心提供时钟之后，用户程序就已经开始运行起来，如果用户程序在调试器接管CPU核心的控制权之前，就初始化好硬件模块并启动运行，则仍然会产生与调试器的冲突。 根据以上的分析，解决这个问题的关键是，在调试器接管CPU核心的控制权之前，必须停止所有能够自动运行模块的操作，使它们处于关闭状态，要做到这一点，可以有以下几种方案： 每次退出调试状态时，先停止所有模块的运行，比如执行该模块的DeInit()操作。 在main()函数开始时，不管各模块处于什么状态，先执行该模块的DeInit()操作，然后在程序中较晚的时间或真正需要时再开启相应的模块。这样保证在刚进入调试状态时，调试器能够有充足的时间完成初始化和下载程序的操作。先执行该模块的DeInit()操作的目的是为了关闭哪些上一次操作开启的模块。 调整BOOT0/BOOT1的设置，把启动模式改变为从内部SRAM启动，再结合手工硬件复位。由于BOOT0/BOOT1的状态只在硬件复位时是有意义的，而调试器不做硬件复位，所以这样的设置不会影响调试器下载程序到Flash中，也不会影响在Flash中调试程序。 3. 调试STM32程序时，某些标志位被调试软件意外清除的问题 在调试的过程中，使用调试软件的寄存器或存储器显示窗口，可以很方便地查看外设寄存器的状态。很多朋友都碰到过这样的问题：在单步调试时始终不能在显示窗口看到某些标志位的变化，应该设置这些标志位的时候，窗口中却显示为0，不少人都错误地认为这是芯片的问题。 我们知道，不少STM32外设的状态寄存器位，可以通过对某些寄存器的读操作而清除(例如I2C的I2C_SR1中的很多标志位)，在调试过程中，每当程序停止在设置的断点或单步停止时，调试软件都会自动地读出所有指定的寄存器和存储器中的内容，并刷新窗口的显示，调试软件的这个读操作恰好清除了那些标志位，造成了上面描述的现象。有几个简单的办法解决这个问题： 关闭寄存器或存储器显示窗口。 在寄存器或存储器显示窗口中不显示这些敏感的寄存器。 不要把断点放在对这些敏感的寄存器位操作的前面，以保证这些寄存器位不被调试软件意外地操作。 看官自己添加~ 在使用STM32的外设时，由于IO口被用作复用功能，但是外设的初始化正确，GPIO口初始化正确，外设的时钟也已开启，但是外设无法正常运行 其中最关键的一项，大多数使用者多没有设置，就是某个IO口被用作外设的接口时，需要开启IO口的复用功能的时钟，即进行外设、IO的时钟使能时，需要如下代码：12RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOx | RCC_APB2Periph_AFIO, ENABLE);/* GPIOx and AFIO clock enable */ 在使用时，一定要注意该要点！ 4. 其他关键问题 在实际操作过程中，还有两个最关键的地方，一是ST-LINK网上买的都是山寨货，很不稳定，默认频率4M，可以改成1.8M试一试；二是不要使用USB延迟线，会有不稳定的现象。","categories":[{"name":"硬件","slug":"硬件","permalink":"http://yoursite.com/categories/硬件/"},{"name":"stm32","slug":"硬件/stm32","permalink":"http://yoursite.com/categories/硬件/stm32/"}],"tags":[{"name":"sw连接","slug":"sw连接","permalink":"http://yoursite.com/tags/sw连接/"}]},{"title":"STM32去掉flash读保护","slug":"STM32去掉flash读保护","date":"2017-06-21T11:22:47.000Z","updated":"2017-06-21T11:22:47.428Z","comments":true,"path":"2017/06/21/STM32去掉flash读保护/","link":"","permalink":"http://yoursite.com/2017/06/21/STM32去掉flash读保护/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"本博客的编辑格式说明","slug":"博客的编辑格式说明","date":"2017-06-21T07:54:06.000Z","updated":"2017-06-21T11:21:04.204Z","comments":true,"path":"2017/06/21/博客的编辑格式说明/","link":"","permalink":"http://yoursite.com/2017/06/21/博客的编辑格式说明/","excerpt":"本博客采用Hexo + hexo-themes-bubuzou来搭建，核心的格式是markdown，但Hexo也有扩展，bubuzou主题也有少部分扩展，所以要分成这三个部分来说明编辑格式。","text":"本博客采用Hexo + hexo-themes-bubuzou来搭建，核心的格式是markdown，但Hexo也有扩展，bubuzou主题也有少部分扩展，所以要分成这三个部分来说明编辑格式。 1. markdown格式1.1 标题只要在文字前加#就可以表示标题 # 一级标题 ## 二级标题 bubuzou主题自动生成文章段落结构只支持两级标题 1.2 列表列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加1. 2. 3. 符号要和文字之间加上一个字符的空格。 1 2 3 1.3 引用只需要在文本前加入 &gt; 这种尖括号（大于号）即可。效果: 引用的样子 1.4 插入链接和图片插入链接与插入图片的语法很像，区别在一个 !号 链接格式：[链接的文字](http://地址 &quot;鼠标移上去时的气泡提示&quot;) 效果:新浪 图片格式：![图片](http://mouapp.com/Mou_128.png) 效果: 但是这里只能引用网络上的图片，Hexo可以实现按相对地址加载图片，只需在source文件下建一个文件夹images，把图片放进去，将引用地址改成(/images/图片名称.jpg): 1.5 斜体和粗体用两个 包含一段文本就是粗体的语法，用一个 包含一段文本就是斜体的语法。效果: 粗体 斜体 1.6 表格表格的格式如下 | Tables | Are | Cool | | ------------- |-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | 效果: Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 1.7 代码框如果需要在文章里优雅的引用代码框，只需要用两个 ` 把中间的代码包裹起来，但是由于代码中存在各种符号和格式会干扰markdown格式，在hexo的格式中会有更好效果的格式。 1.8 分割线分割线的语法只需要三个 * 号，标准的markdown格式可以实现，但是这个主题下不能实现 关于mardown格式更加详细说明，可以参考这个网址markdown格式中文简洁版markdown格式详细中文版 2. Hexo格式Hexo自己扩展了很多标签，可以通过官网说明 标签插件来查看详细的说明。 2.1 引用块Hexo的引用块可以实现很多不同的需求，可以在文章中插入引言，可包含作者、来源和标题。 {% blockquote [author[, source]] [link] [source_link_title] %} content {% endblockquote %} 比如： {% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %} Every interaction is both precious and an opportunity to delight. {% endblockquote %} 效果是这样的：Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing 2.2 代码块Hexo的代码块格式： {% codeblock [title] [lang:language] [url] [link text] %} code snippet {% endcodeblock %} 比如： {% codeblock _.compact http://underscorejs.org/#compact Underscore.js %} _.compact([0, 1, false, 2, '', 3]); => [1, 2, 3] {% endcodeblock %} 效果： _.compactUnderscore.js12_.compact([0, 1, false, 2, &apos;&apos;, 3]);=&gt; [1, 2, 3] 2.3 图片在文章中插入指定大小的图片。格式： {% img [class names] /path/to/image [width] [height] [title text [alt text]] %} 比如： {% img /images/201706211652_小狗.jpg 200 200 提示 %} 效果： 2.4 查看更多内容如果只显示文章的一部分，剩余的部分可以通过 12&lt;!--more--&gt; 来查看 2.4 其他其他如Frame、视频、引用文章等可以通过标签插件来查看。 3. bubuzou主题可以查看bubuzou主题的中文说明文档来获得更多信息。 3.1 警告块主题格式里主要是加了一警告块，这也是如何插入HTML格式的一个实例。 格式如下： 1234&lt;div class=&quot;tip&quot;&gt; ** 警告**&lt;p&gt; 这是一个警告实例。&lt;/div&gt; 效果： 警告 这是一个警告实例。","categories":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}],"tags":[{"name":"格式说明","slug":"格式说明","permalink":"http://yoursite.com/tags/格式说明/"}]}]}